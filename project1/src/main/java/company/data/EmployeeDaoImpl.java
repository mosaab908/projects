package company.data;

import company.entity.Employee;

import java.sql.*;

public class EmployeeDaoImpl implements EmployeeDao {

    // Here, we are going to implement some methods that interact with the database:
    Connection connection;
    // constructor initialize the connection based on our connection factory:
    public EmployeeDaoImpl() {
        connection = ConnectionFactory.getConnection();
    }


    public Employee insertRegister(Employee employee) {
        System.out.println(employee.toString());
        System.out.println("Registering a new employee");
        String sql= "insert into employees (eId,firstname, lastname, username, password,role) values (default, ?, ?, ?,?,default);";

        try {
            // here, we pass in a flag that tells the program that we want to return the generated id:
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            // taking our statement and setting up the values based on where we put the ?
            preparedStatement.setString(1, employee.getFirstName());
            preparedStatement.setString(2, employee.getLastName());
            preparedStatement.setString(3, employee.getUsername());
            preparedStatement.setString(4, employee.getPassword());
            //preparedStatement.setString(5, employee.getRole());
            System.out.println(preparedStatement.toString());

            // we've set up the string but we haven't executed the statement
            // we use the executeUpdate method whenever we do DML operations (insert, update, delete):
            // going to return the number of records that were updated (or in this case inserted)
            int count = preparedStatement.executeUpdate();
            // we've successfully inserted a single record
            if(count == 1) {
                System.out.println("Employee added successfully.");
                // Now, we have to get the id that was generated by the database
                // whenever we get a return value from the database, we store it in a result set:
                ResultSet resultSet = preparedStatement.getGeneratedKeys();
                // right when we get our result set, it actually points to nothing, so we increment it:
                resultSet.next();
                /**
                 * Generated id might look like this:
                 * -------
                 * |  1  |
                 * -------
                 */
                // because result sets in general can return multiple values, we have to specify which one we want
                // but in this case, there's only one value so we take the first one
                int generatedId = resultSet.getInt(1);
                // set the id to the original object:
                employee.seteId(generatedId);
            }
            else {
                System.out.println("Something went wrong with the insert!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Something went wrong when preparing the statement!");
        }

        return employee;
    }


    public Employee getLogin(String username, String password) {
        String sql = "select * from employees where username = ? and password = ?;";
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            //
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            System.out.println(preparedStatement);
            // Now that we've prepared the statement, we just want to execute it:
            // Result set is going to store the return value of the query:
            ResultSet resultSet = preparedStatement.executeQuery();

            // make sure we actually got a value from the query:
            if(resultSet.next()) {
                //parse out and extract the data
                int eId = resultSet.getInt("eId");
                String firstName = resultSet.getString("firstName");
                String lastName = resultSet.getString("lastName");
                String role = resultSet.getString("role");

                // use the data to create employee object
                Employee employee = new Employee(eId, firstName, lastName, role);
                // return the pet object
                return employee;
            }
            else {
                System.out.println("something went wrong when trying to query for the employee, employee might not exist");
            }
        } catch (SQLException e) {
            System.out.println("Something went wrong when trying to retrieve data.");
            e.printStackTrace();

        }
        // if we reach the end of this method, return null
        return null;

    }

    //public Employees insertTicket(Tickets ticket) {
        //return null;
    //}

    //public Employees getSubmission(int employee_id) {
       // return null;
   // }
}
